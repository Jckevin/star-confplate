<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	
	<!-- 
		使用tomcat自带的servlet来解析静态资源，效率比springmvc的静态资源映射的方法要更高效。
		1.配置方法如下：
		<servlet-mapping>
			<servlet-name>default</servlet-name>
			<url-pattern>*.js</url-pattern>
		</servlet-mapping>
		<servlet-mapping>
			<servlet-name>default</servlet-name>
			<url-pattern>*.css</url-pattern>
		</servlet-mapping>
		保证以上的servlet-mapping在Spring的org.springframework.web.servlet.DispatcherServlet之前生效。
		2.此后jsp页面的中的脚本引用要通过完整的资源路径来访问。例如
		<script type="text/javascript" src="/star-confplate/star-js/capture.js"></script>
		这种方式有风险，就是万一项目改名称，绝对路径要通通改一遍。。。
		替代方案：
		<script type="text/javascript" src="<c:url value='/star-js/capture.js'/>"></script>
		通过jstl的使用，可以自动加上项目的名称。
		3.最后一个注意事项
		必须保证静态资源在运行项目的根目录下，如果在WEB-INF下，以上配置任然会提示404错误。
		【所以】，建议小并发的web系统中，使用Spring的资源映射方法，项目打包更简洁。实在需要提升这块的性能了，再用这种方案配置。
	 -->

	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<context-param>
		<param-name>log4jContextName</param-name>
		<param-value>star-confplate</param-value>
	</context-param>

	<context-param>
		<param-name>log4jConfiguration</param-name>
		<param-value>/WEB-INF/star-conf/log4j2.xml</param-value>
	</context-param>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/star-conf/appContext.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<servlet>
		<servlet-name>star-confplate</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>

	<servlet-mapping>
		<servlet-name>star-confplate</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>star-confplate</param-value>
	</context-param>
</web-app>